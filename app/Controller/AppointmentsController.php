<?php
App::uses('AppController', 'Controller');
/**
 * Appointments Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Appointments $Appointments
 */
class AppointmentsController extends AppController {

public $uses = array("Appointment", "AppointmentType", "Paciente", "Doctor");

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Appointment->recursive = 0;


		$appointments = $this->Appointment->find("all");
		$response["appointments"] = $appointments;

		$appointmentTypes = $this->AppointmentType->find('list');
		$this->set(compact('appointmentTypes'));

		$pacientes = $this->Paciente->find('list', array("fields"=>array("Paciente.id", "Paciente.fullName")));
		$this->set(compact('pacientes'));

		$doctors = $this->Doctor->find('list', array("fields"=>array("id","nombre")));
		$this->set(compact('doctors'));

		$branches = $this->Appointment->Branch->find('list');
		$this->set(compact('branches'));

		$this->set("citas", $appointments);
		$this->set("response", json_encode($response));
		//$this->Session->write("var1", json_encode($appointments));
		//$this->render('jsonresponse');
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Appointment->exists($id)) {
			$response["id"]=0;
			$response["txt"]=__("Invalid Appointment");
			//throw new NotFoundException(__('Invalid appointment'));
		}
		else{
			$options = array('conditions' => array('Appointment.' . $this->Appointment->primaryKey => $id));
			$appointment = $this->Appointment->find('first', $options);
		
			$response["id"]=1;
			$response["txt"]=__("Appointment retrive succcess");
			$response["appointment"] = $appointment;
		}
	}






public function retriveAll() {

		//$this->layout("ajax");

		//$response["id"]=0;
		//$response["txt"]=__("Playlist is Empty");

		$response["id"]=1;
		$response["txt"]="Retrived";

		$appointments = $this->Appointment->find("all");

		$appointmentsJson = array();
		
		foreach($appointments as $appointment){
			$appointmentsJson[] = array("id"=>$appointment["Appointment"]["id"],
										"title"=>$appointment["Paciente"]["fullName"],
										"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
										"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
										"allDay"=>false);
		}

		$response["appointments"] = $appointmentsJson;

		$this->set("response", json_encode($response));
		$this->render('jsonresponse');
	}




public function retriveById() {

		//$this->layout("ajax");

		//$response["id"]=0;
		//$response["txt"]=__("Playlist is Empty");

		$response["id"]=1;
		$response["txt"]="Retrived";

		$appointment = $this->Appointment->find("first", array("conditions"=>array("Appointment.id"=>$this->request->data["appointmentId"])));

		$appointmentsJson = array();
		
		/*
		$appointmentsJson = array("id"=>$appointment["Appointment"]["id"],
									"title"=>$appointment["Paciente"]["fullName"],
									"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
									"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
									"allDay"=>false);
		*/
		$response["appointmentRaw"] = $appointment;
		$this->set("response", json_encode($response));
		$this->render('jsonresponse');
	}



/**
 * add method
 *
 * @return void
 */
	public function add() {

		if ($this->request->is('post')) {

			$appointmentData["Appointment"]["paciente_id"] = $this->request->data["pacienteId"];
			$appointmentData["Appointment"]["doctor_id"] = $this->request->data["doctorId"];
			$appointmentData["Appointment"]["branch_id"] = $this->request->data["branchId"];
			$appointmentData["Appointment"]["appointment_type_id"] = $this->request->data["appointmentTypeId"];
			$appointmentData["Appointment"]["date"] = $this->request->data["dateYear"]."-".$this->request->data["dateMonth"]."-".$this->request->data["dateDay"];
			$appointmentData["Appointment"]["time"] = $this->request->data["beginTimeHour"].":".$this->request->data["beginTimeMinute"];
			$appointmentData["Appointment"]["end_time"] = $this->request->data["endTimeHour"].":".$this->request->data["endTimeMinute"];

			
			$this->Appointment->create();
			if ($this->Appointment->save($appointmentData)) {

				$this->Appointment->recursive = 1;
				$appointment = $this->Appointment->find("first",
														array("conditions"=>array("Appointment.id"=>$this->Appointment->id)));

			$appointmentJson = array("id"=>$appointment["Appointment"]["id"],
										"title"=>$appointment["Paciente"]["fullName"],
										"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
										"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
										"allDay"=>false);

				$response["id"]=1;
				$response["txt"]=__("Appointment register succcess");
				$response["appointment"]=$appointmentJson;
			} else {
				$response["id"]=0;
				$response["txt"]=__("The appointment could not be saved. Please, try again.");
				
			}

			
		}else{
			
			$response["id"]=0;
			$response["txt"]=__("Incorrect Access");
		}


		$this->set("response", json_encode($response));
		$this->render('jsonresponse');
	}


	public function updateAppointmentDate() {

		if ($this->request->is('post')) {

			$this->Appointment->id = $this->request->data["appointmentId"];
			$appointmentData["Appointment"]["id"] = $this->request->data["appointmentId"];
			$appointmentData["Appointment"]["date"] = $this->request->data["dateYear"]."-".$this->request->data["dateMonth"]."-".$this->request->data["dateDay"];
			$appointmentData["Appointment"]["time"] = $this->request->data["beginTimeHour"].":".$this->request->data["beginTimeMinute"];
			$appointmentData["Appointment"]["end_time"] = $this->request->data["endTimeHour"].":".$this->request->data["endTimeMinute"];

			
			//$this->Appointment->create();
			if ($this->Appointment->save($appointmentData)) {

				$this->Appointment->recursive = 1;
				$appointment = $this->Appointment->find("first",
														array("conditions"=>array("Appointment.id"=>$this->Appointment->id)));

			$appointmentJson = array("id"=>$appointment["Appointment"]["id"],
										"title"=>$appointment["Paciente"]["fullName"],
										"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
										"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
										"allDay"=>false);

				$response["id"]=1;
				$response["txt"]=__("Appointment update succcess");
				$response["appointment"]=$appointmentJson;
			} else {
				$response["id"]=0;
				$response["txt"]=__("The appointment could not be saved. Please, try again.");
				
			}

			
		}else{
			
			$response["id"]=0;
			$response["txt"]=__("Incorrect Access");
		}


		$this->set("response", json_encode($response));
		$this->render('jsonresponse');
	}




/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Appointment->exists($id)) {
			throw new NotFoundException(__('Invalid appointment'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Appointment->save($this->request->data)) {
				$this->Session->setFlash(__('The appointment has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The appointment could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Appointment.' . $this->Appointment->primaryKey => $id));
			$this->request->data = $this->Appointment->find('first', $options);
		}
		$appointmentTypes = $this->Appointment->AppointmentType->find('list');
		$this->set(compact('appointmentTypes'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function deleteAppointment() {

		$this->request->onlyAllow('post', 'delete');

		if($this->request->is("post") || $this->request->is("put")){

			$this->Appointment->id = $this->request->data["appointmentId"];
			if ($this->Appointment->delete()) {
				$response["id"]=1;
				$response["txt"]=__("Appointment Deleted");
			} else {
				$response["id"]=0;
				$response["txt"]=__("The appointment could not be deleted. Please, try again.");
				}

		}else{
			$response["id"]=0;
			$response["txt"]=__("Bad Request");
				
		}
		
		$this->set("response", json_encode($response));
		$this->render('jsonresponse');
		}


public function retriveByBranch() {

		$response["id"]=1;
		$response["txt"]="Retrived";

		$appointments = $this->Appointment->find("all", array("conditions"=>array("Appointment.branch_id"=>$this->request->data["appointmentId"])));

		$appointmentsJson = array();
		
		foreach($appointments as $appointment){
			$appointmentsJson[] = array("id"=>$appointment["Appointment"]["id"],
										"title"=>$appointment["Paciente"]["fullName"],
										"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
										"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
										"allDay"=>false);
		}

		$response["appointments"] = $appointmentsJson;

		$this->set("response", json_encode($response));
		$this->render('jsonresponse');

	}


public function retriveByDoctor() {

		$response["id"]=1;
		$response["txt"]="Retrived";

		$appointments = $this->Appointment->find("all", array("conditions"=>array("Appointment.doctor_id"=>$this->request->data["doctorId"])));

		$appointmentsJson = array();
		
		foreach($appointments as $appointment){
			$appointmentsJson[] = array("id"=>$appointment["Appointment"]["id"],
										"title"=>$appointment["Paciente"]["fullName"],
										"start"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["time"]."Z",
										"end"=>$appointment["Appointment"]["date"]."T".$appointment["Appointment"]["end_time"]."Z",
										"allDay"=>false);
		}

		$response["appointments"] = $appointmentsJson;

		$this->set("response", json_encode($response));
		$this->render('jsonresponse');

	}




	
}
