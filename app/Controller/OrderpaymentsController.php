<?php
App::uses('AppController', 'Controller');
/**
 * Orderpayments Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Orderpayment $Orderpayment
 */
class OrderpaymentsController extends AppController {

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Orderpayment->recursive = 0;
		$this->set('orderpayments', $this->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Orderpayment->exists($id)) {
			throw new NotFoundException(__('Invalid orderpayment'));
		}
		$options = array('conditions' => array('Orderpayment.' . $this->Orderpayment->primaryKey => $id));
		$this->set('orderpayment', $this->Orderpayment->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add($id = null) {

		$this->set("labid", $id);

		if ($this->request->is('post')) {
			$this->Orderpayment->create();
			//$this->request->data["Oderpayment"]["laborder_id"] = $id;
			if ($this->Orderpayment->save($this->request->data)) {
				$this->Session->setFlash(__('The orderpayment has been saved'));
				return $this->redirect(array('action' => 'index', "controller"=>"laborders"));
			} else {
				$this->Session->setFlash(__('The orderpayment could not be saved. Please, try again.'));
			}
		}
		$laborders = $this->Orderpayment->Laborder->find('list');
		$this->set(compact('laborders'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {

		$this->set("labid", $id);
		if (!$this->Orderpayment->exists($id)) {
			throw new NotFoundException(__('Invalid orderpayment'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Orderpayment->save($this->request->data)) {
				$this->Session->setFlash(__('The orderpayment has been saved'));
				return $this->redirect(array('action' => 'index', "controller"=>"laborders"));
			} else {
				$this->Session->setFlash(__('The orderpayment could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Orderpayment.' . $this->Orderpayment->primaryKey => $id));
			$this->request->data = $this->Orderpayment->find('first', $options);
		}
		$laborders = $this->Orderpayment->Laborder->find('list');
		$this->set(compact('laborders'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Orderpayment->id = $id;
		if (!$this->Orderpayment->exists()) {
			throw new NotFoundException(__('Invalid orderpayment'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Orderpayment->delete()) {
			$this->Session->setFlash(__('The orderpayment has been deleted.'));
		} else {
			$this->Session->setFlash(__('The orderpayment could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
